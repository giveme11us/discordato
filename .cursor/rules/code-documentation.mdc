---
description: 
globs: 
alwaysApply: true
---
# Rule Name: Code Documentation Standards
Version: 1.0.0
Last Updated: 2024-03-20
Tags: #documentation #code-quality #maintainability

## Purpose
Establishes consistent standards for documenting code within the Discord bot project, ensuring clarity, maintainability, and facilitating collaboration among developers.

## Critical Requirements
- All files must contain a header with purpose and critical information
- All functions must have comprehensive docstrings with parameters and return values
- In-progress or incomplete code must include TODO comments with clear next steps
- All modules must have corresponding documentation in data/docs directory

## Documentation Structure

### File Headers
```python
"""
path: modules/example/example.py
purpose: Implements the example feature functionality
critical:
- Requires proper initialization via setup()
- Must be cleaned up with teardown()
- Configuration is loaded from environment variables
"""
```

### Function Documentation
```python
def process_message(message, config=None):
    """
    Process incoming messages and apply configured actions.
    
    TODO List:
    [x] Basic message parsing
    [x] Content filtering
    [ ] Logging enhancements
    [ ] Rate limiting implementation
    
    Next Steps:
    1. Implement rate limiting per user
    2. Add cache for frequent messages
    
    Future Improvements:
    - Performance optimization for large servers
    - Machine learning integration for better filtering
    
    Args:
        message (discord.Message): The message to process
        config (dict, optional): Configuration parameters. Defaults to None.
        
    Returns:
        bool: True if message was processed, False otherwise
        
    Raises:
        ValueError: If message is invalid
    """
    # Implementation
    pass
```

### Class Documentation
```python
class MessageProcessor:
    """
    Handles the processing of Discord messages with configurable filters.
    
    Attributes:
        filters (list): List of active message filters
        config (dict): Configuration settings
        stats (dict): Processing statistics
        
    TODO List:
    [x] Basic filter implementation
    [ ] Advanced pattern matching
    [ ] Database integration
    """
    
    def __init__(self, config=None):
        """
        Initialize the message processor with optional configuration.
        
        Args:
            config (dict, optional): Configuration dictionary. Defaults to None.
        """
        # Implementation
        pass
```

### Implementation Status Format
```python
# TODO Section:
# [x] Completed feature
# [~] In progress feature
# [ ] Not started feature
# [!] Needs review
# [?] Needs discussion
#
# Next Steps:
# 1. First step to complete
# 2. Second step to complete
#
# Future Considerations:
# - Performance improvement idea
# - Feature enhancement idea
```

## Module Documentation

### Location
- All module documentation must be stored in `data/docs/modules/`
- README.md remains in the project root directory
- Feature-specific documentation should be in relevant subdirectories

### Format
```markdown
# Module Name
Version: 1.0.0
Last Updated: YYYY-MM-DD

## Overview
Brief description of the module and its purpose.

## Features
- Feature 1: Description
- Feature 2: Description

## Commands
| Command | Description | Parameters |
|---------|-------------|------------|
| /command1 | Purpose of command | param1: Description |
| /command2 | Purpose of command | param1: Description |

## Configuration
| Setting | Description | Default |
|---------|-------------|---------|
| SETTING_NAME | Purpose | default_value |

## Implementation Details
Technical details about the implementation.

## Examples
```code
Example usage
```
```

## Best Practices

### Documentation Writing
- Use present tense for descriptions
- Be specific about function behavior
- Document exceptions and edge cases
- Keep documentation updated with code changes
- Focus on "why" rather than "what" for complex logic

### TODO Management
- Keep TODO lists current
- Mark completed items with [x]
- Assign priorities to pending items
- Include estimated complexity
- Reference related issues or tickets

### Comment Placement
- File headers at the top of each file
- Function/class docstrings directly after definition
- Implementation comments inline with complex logic
- TODO comments before the affected section

## Examples

### ✅ Good Documentation Example
```python
"""
path: modules/keyword_filter/filter.py
purpose: Implements regex-based message filtering with configurable actions
critical:
- Pattern validation is required before saving
- Filter actions must be one of: log, notify, delete
- Filters require a severity level
"""

import re
import logging
from enum import Enum

logger = logging.getLogger(__name__)

class FilterAction(Enum):
    """
    Available actions for keyword filters.
    
    Members:
        LOG: Only log the match
        NOTIFY: Log and send notification
        DELETE: Log, notify, and delete the message
    """
    LOG = "log"
    NOTIFY = "notify"
    DELETE = "delete"

class KeywordFilter:
    """
    Regex-based message filter with configurable actions.
    
    TODO List:
    [x] Basic pattern matching
    [x] Action implementation
    [ ] Filter optimization
    
    Attributes:
        pattern (re.Pattern): Compiled regex pattern
        action (FilterAction): Action to take on match
        severity (str): Severity level (low, medium, high)
    """
    
    def __init__(self, pattern, action, severity="medium"):
        """
        Initialize a keyword filter.
        
        Args:
            pattern (str): Regex pattern to match
            action (str): Action to take (log, notify, delete)
            severity (str, optional): Severity level. Defaults to "medium".
            
        Raises:
            ValueError: If pattern is invalid or action is not recognized
        """
        # Implementation
        pass
```

### ❌ Bad Documentation Example
```python
# This is the keyword filter
class KeywordFilter:
    def __init__(self, pattern, action, severity="medium"):
        # Setup filter
        self.pattern = re.compile(pattern)
        self.action = action
        self.severity = severity
    
    # Process message
    def process(self, message):
        # Check if matches
        if re.search(self.pattern, message.content):
            # Do the action
            if self.action == "log":
                pass
            # Do notification
            elif self.action == "notify":
                pass
            # Delete it
            elif self.action == "delete":
                pass
```

## Notes
- WARNING: Undocumented code will be harder to maintain and integrate
- NOTE: Documentation should evolve with the code
- PERF: Well-documented code leads to better performance optimizations

## Tags
#docstrings #comments #todos #code-quality 