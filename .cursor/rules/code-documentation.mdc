# Code Documentation Guidelines

## File Headers

Every source file should start with a header comment that includes:

```python
"""
path: path/to/file.py
purpose: One-sentence description of the file's purpose
author: Original author's name
date: Creation date
"""
```

## Function Documentation

Functions should be documented using docstrings:

```python
def process_message(message: discord.Message) -> bool:
    """
    Process an incoming Discord message.
    
    Args:
        message: The Discord message to process
        
    Returns:
        bool: True if message was processed successfully
        
    Raises:
        ValueError: If message is invalid
    """
    pass
```

## Class Documentation

Classes should have comprehensive docstrings:

```python
class MessageHandler:
    """
    Handles processing and routing of Discord messages.
    
    Attributes:
        channel_id (int): ID of the channel being monitored
        enabled (bool): Whether handler is active
        
    Methods:
        process(message): Process a single message
        enable(): Enable message handling
        disable(): Disable message handling
    """
    pass
```

## Constants and Enums

Document constants and enums clearly:

```python
# Message processing states
class ProcessingState(Enum):
    """Available states for message processing."""
    PENDING = "pending"
    PROCESSING = "processing" 
    COMPLETE = "complete"
    FAILED = "failed"

# Configuration constants
MAX_RETRIES = 3  # Maximum number of processing retries
TIMEOUT_SEC = 30  # Timeout in seconds for API calls
```

## Code Comments

Use comments to explain complex logic:

```python
def handle_reaction(reaction: discord.Reaction) -> None:
    # Skip reactions from bots
    if reaction.member.bot:
        return
        
    # Check if reaction meets forwarding threshold
    if reaction.count >= FORWARD_THRESHOLD:
        # Forward to destination channel
        forward_message(reaction.message)
```

## Error Handling

Document error cases and recovery:

```python
try:
    # Attempt to process message
    result = process_message(message)
except InvalidMessageError as e:
    # Log error and skip invalid messages
    logger.error(f"Invalid message format: {e}")
    return False
except APIError as e:
    # Retry on API errors
    logger.warning(f"API error, retrying: {e}")
    retry_process_message(message)
```

## Configuration

Document configuration options:

```python
"""
Configuration options for message processing.

Options:
    PROCESS_DELAY: Delay between message processing in seconds
    MAX_QUEUE_SIZE: Maximum number of messages to queue
    RETRY_COUNT: Number of retries for failed processing
"""

PROCESS_DELAY = 0.5
MAX_QUEUE_SIZE = 1000
RETRY_COUNT = 3
```

## Logging

Document logging practices:

```python
# Log important events
logger.info("Starting message processor")
logger.debug(f"Processing message {message.id}")
logger.warning("Queue size exceeds 80%")
logger.error("Failed to process message", exc_info=True)
```

## Type Hints

Use clear type hints:

```python
from typing import List, Dict, Optional

def get_messages(
    channel_id: int,
    limit: Optional[int] = None,
    before: Optional[datetime] = None
) -> List[discord.Message]:
    """Get messages from a channel."""
    pass
```

## Examples

Include usage examples:

```python
"""
Example usage:
    
    # Create message handler
    handler = MessageHandler(channel_id=123456)
    
    # Process single message
    message = await channel.fetch_message(message_id)
    result = handler.process(message)
    
    # Process message batch
    messages = await channel.history(limit=10).flatten()
    results = handler.process_batch(messages)
"""
```

## Testing

Document test requirements:

```python
def test_message_processing():
    """
    Test message processing functionality.
    
    Requirements:
        - Valid Discord message object
        - Active channel
        - Proper permissions
        
    Covers:
        - Normal message processing
        - Error handling
        - Rate limiting
    """
    pass
```

## Version History

Track major changes:

```python
"""
Version History:
    1.0.0 - Initial implementation
    1.1.0 - Added batch processing
    1.2.0 - Improved error handling
    2.0.0 - Refactored for Discord.py 2.0
"""
```

## Dependencies

Document dependencies:

```python
"""
Dependencies:
    - discord.py >= 2.0.0
    - aiohttp >= 3.7.4
    - python-dotenv >= 0.19.0
    
Optional:
    - uvloop (performance)
    - orjson (performance)
"""
```

## Security

Document security considerations:

```python
"""
Security Notes:
    - Validate all user input
    - Sanitize message content
    - Check permissions before actions
    - Log security events
"""
```

## Performance

Document performance characteristics:

```python
"""
Performance Notes:
    - O(n) time complexity
    - Caches up to 1000 messages
    - Rate limited to 100 req/min
    - Uses connection pooling
"""
```

## Maintenance

Document maintenance requirements:

```python
"""
Maintenance:
    - Clear cache daily
    - Update permissions weekly
    - Monitor error rates
    - Check resource usage
"""
```