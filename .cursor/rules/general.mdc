---
description: 
globs: 
alwaysApply: true
---
# Rule Name: Project Overview - Discord Bot Framework
Version: 1.0.0
Last Updated: 2024-03-20
Tags: #project-context #architecture #framework
always ask before edit the /Users/ivansposato/Documents/projects/easycopeu/discord/discordato/.env file
## Purpose
Provides essential context about the Discord bot project's architecture, design philosophy, and core components to enable better understanding and context-aware suggestions.

## Project Context

### Core Architecture
- **Modular Discord Bot System**: A flexible framework supporting multiple operational modes (Single Bot, Multi-Bot, Partial Mode)
- **Technology Stack**: Python-based Discord bot using discord.py library
- **Design Philosophy**: Emphasizes modularity, configurability, and maintainable code structure

### Key Components
1. **Core Framework**
   - Bot Manager: Handles initialization and lifecycle
   - Command Router: Routes commands to appropriate modules
   - Command Registry: Central command management
   - Command Sync: Manages Discord slash command registration

2. **Module System**
   - Independent functional modules
   - Plug-and-play architecture
   - Role-based access control
   - Configuration management per module

3. **Primary Features**
   - Slash Command Support
   - Comprehensive Logging
   - Environment-based Configuration
   - Multiple Operational Modes

### Critical Modules
1. **Pinger System**
   - Monitors @everyone and @here mentions
   - Notification system with whitelist
   - Configurable channel routing

2. **Reaction Systems**
   - Forward System: Message forwarding via reactions
   - Link Reaction: Store-specific link detection
   - Product ID extraction capabilities

3. **Redeye Module**
   - Profile and task management
   - CSV integration
   - Role-based access control

## Code Organization

### Directory Structure
```
discord_bot_project/
├── discord_bot.py        # Entry point
├── core/                 # Core framework
├── cogs/                 # Discord.py cogs
├── modules/             # Functional modules
├── utils/               # Utility functions
└── tests/              # Test files
```

### Configuration Approach
- Environment-based (.env files)
- Module-specific settings
- Role-based permissions
- Feature flags

## Development Guidelines

### Code Style
- Prefer explicit over implicit
- Maintain modular architecture
- Follow single responsibility principle
- Implement comprehensive error handling

### Feature Implementation
- Use slash commands for interactions
- Implement role-based access control
- Provide configuration options
- Include logging and monitoring

### Testing Requirements
- Unit tests for core functionality
- Integration tests for modules
- Command registration verification
- Configuration validation

## Critical Considerations

### Security
- Token management
- Permission systems
- Input validation
- Rate limiting

### Performance
- Asynchronous operations
- Resource management
- Cache utilization
- Command throttling

### Scalability
- Module independence
- Configuration flexibility
- Resource optimization
- Error resilience

## Documentation Management
- All project documentation must reside in `data/docs/`
- Exception: README.md remains in project root
- Each module requires its own documentation file
- When adding features, update corresponding documentation

## Code Documentation Standards
- All functions must include comprehensive docstrings
- Code should include TODO lists for in-progress features
- Implementation status must be clearly marked
- Next steps and future considerations should be documented

## Notes
- WARNING: Always maintain modular structure when adding features
- NOTE: Configuration should be environment-based
- PERF: Consider Discord API rate limits in implementations

## Tags
#discord-bot #modular-architecture #python #framework 

# General Development Guidelines

## Code Organization

1. **Module Structure**
   - Clear separation of concerns
   - Logical grouping of related functionality
   - Consistent file naming

2. **Feature Implementation**
   - Self-contained modules
   - Clear interfaces
   - Proper error handling

3. **Core Systems**
   - Command handling
   - Event processing
   - Configuration management
   - Logging system

## Best Practices

1. **Code Quality**
   - Follow PEP 8 style guide
   - Write descriptive variable names
   - Keep functions focused and small
   - Use type hints consistently

2. **Documentation**
   - Document all public interfaces
   - Include usage examples
   - Keep documentation up-to-date
   - Use clear and concise language

3. **Testing**
   - Write comprehensive unit tests
   - Include integration tests
   - Test edge cases
   - Maintain test coverage

4. **Error Handling**
   - Use appropriate exception types
   - Provide helpful error messages
   - Log errors properly
   - Implement graceful fallbacks

5. **Performance**
   - Optimize critical paths
   - Use appropriate data structures
   - Implement caching where beneficial
   - Monitor resource usage

## Development Process

1. **Version Control**
   - Use meaningful commit messages
   - Keep commits focused
   - Follow branching strategy
   - Review code before merging

2. **Code Review**
   - Check for style compliance
   - Verify functionality
   - Look for potential issues
   - Provide constructive feedback

3. **Deployment**
   - Use automated deployment
   - Test in staging environment
   - Monitor for issues
   - Have rollback plan

## Security

1. **Data Protection**
   - Secure sensitive information
   - Use environment variables
   - Implement proper authentication
   - Follow security best practices

2. **Input Validation**
   - Validate all user input
   - Sanitize data appropriately
   - Prevent injection attacks
   - Handle edge cases

3. **Access Control**
   - Implement role-based access
   - Check permissions properly
   - Log security events
   - Regular security audits

## Maintenance

1. **Code Cleanup**
   - Remove dead code
   - Fix technical debt
   - Update dependencies
   - Refactor when needed

2. **Monitoring**
   - Track performance metrics
   - Monitor error rates
   - Check resource usage
   - Set up alerts

3. **Updates**
   - Keep dependencies current
   - Apply security patches
   - Update documentation
   - Test thoroughly

## Communication

1. **Team Collaboration**
   - Regular updates
   - Clear communication
   - Knowledge sharing
   - Pair programming

2. **Documentation**
   - Keep README updated
   - Document changes
   - Write clear comments
   - Share knowledge

3. **Issue Tracking**
   - Use issue tracker
   - Provide clear descriptions
   - Track progress
   - Update status 